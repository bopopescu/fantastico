'''
Copyright 2013 Cosnita Radu Viorel

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation 
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

.. codeauthor:: Radu Viorel Cosnita <radu.cosnita@gmail.com>
.. py:module:: fantastico.mvc.model_facade
'''
from fantastico.exceptions import FantasticoIncompatibleClassError
from fantastico.mvc import BASEMODEL
from sqlalchemy.ext.declarative.api import DeclarativeMeta
import inspect

class ModelFacade(object):
    '''This class provides a generic model facade factory. In order to work **Fantastico** base model it is recommended
    to use autogenerated facade objects. A facade object is binded to a given model and given database session.'''
        
    _model_cls = None
    _session = None
    
    @property
    def model_cls(self):
        '''This property holds the model based on which this facade is built.'''
        
        return self._model_cls
    
    def __init__(self, model_cls, session):
        self._model_cls = model_cls
        self._session = session
        
    def new_model(self, *args, **kwargs):
        '''This method is used to obtain an instance of the underlining model. Below you can find a very simple example:
        
        .. code-block:: python
        
            class PersonModel(BASEMODEL):
                __tablename__ = "persons"
                
                id = Column("id", Integer, autoincrement=True, primary_key=True)
                first_name = Column("first_name", String(50))
                last_name = Column("last_name", String(50))
                
                def __init__(self, first_name, last_name):
                    self.first_name = first_name
                    self.last_name = last_name
                    
            facade = ModelFacade(PersonModel)
            
            model = facade.new_model("John", last_name="Doe")
            
        :param args: A list of positional arguments we want to pass to underlining model constructor.
        :type args: list
        :param kwargs: A dictionary containing named parameters we want to pass to underlining model constructor.
        :type kwargs: dict
        :returns: A BASEMODEL instance if everything is ok.
        :raises fantastico.exceptions.FantasticoIncompatibleClassError: It raises this exception if the underlining
            model is not a subclass of BASEMODEL.
        '''
        
        if not isinstance(self.model_cls, DeclarativeMeta):
            raise FantasticoIncompatibleClassError("Class %s does not inherits BASEMODEL." % self.model_cls.__class__.__name__)
        
        return self.model_cls(*args, **kwargs)